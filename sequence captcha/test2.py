# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import random
from PIL import Image
from PIL import ImageFont
from PIL import ImageDraw
import os

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    sloution=""
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(503, 311)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.image = QtWidgets.QLabel(self.centralwidget)
        self.image.setGeometry(QtCore.QRect(180, 10, 141, 71))
        self.image.setText("")
        
        self.image.setObjectName("image")
        self.loadbtn = QtWidgets.QPushButton(self.centralwidget)
        self.loadbtn.setGeometry(QtCore.QRect(330, 110, 80, 26))
        self.loadbtn.setObjectName("loadbtn")
        self.textinput = QtWidgets.QLineEdit(self.centralwidget)
        self.textinput.setGeometry(QtCore.QRect(190, 110, 113, 26))
        self.textinput.setObjectName("textinput")
        self.checkbtn = QtWidgets.QPushButton(self.centralwidget)
        self.checkbtn.setGeometry(QtCore.QRect(210, 170, 80, 26))
        self.checkbtn.setObjectName("checkbtn")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 503, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.loadbtn.clicked.connect(self.show_img)
        self.checkbtn.clicked.connect(self.check_fn)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.loadbtn.setText(_translate("MainWindow", "loadimg "))
        self.checkbtn.setText(_translate("MainWindow", "check"))
    def plotim(self,str):
        txt=str #input text 
        img =Image.new('RGB',(150,50),color=(73,100,107))
        fontsize=18
        image_fraction=0.5
        font=ImageFont.truetype('fonts/Roboto-Bold.ttf',fontsize)
        while font.getsize(txt)[0]<image_fraction*img.size[0]:
                fontsize+=1
                font=ImageFont.truetype('fonts/Roboto-Bold.ttf',fontsize)
        fontsize-=1
        # print(fontsize)
    
        draw=ImageDraw.Draw(img)       
        draw.text((10,10), txt,font=ImageFont.truetype('fonts/Roboto-Bold.ttf',fontsize)) 
        # draw = ImageDraw.Draw(img)
        # font = ImageFont.truetype(r'filepath\..\sans-serif.ttf', 16)
        # draw.text((0, 0),"Draw Thisrint(text Text",(0,0,0),font=font) # this will draw text with Blackcolor and 16 size
        
        img.save('out.jpg')
    
    def loadf1(self):
       path=os.path.join(os.getcwd(),"resource/file1.txt")     
       file = open(path,'r')  
       content = file.readlines()
       __n1__=random.randint(0, len(content)-1)
       str=content[__n1__]
       str=str.split(",")
       ran=random.randint(0, len(str)-1)
       text=""
       for x in enumerate(str,start=0):
           if(x[0]!=ran):
            #print(x[1],end=",")
            text+=x[1]+","
           else : 
               #print("__",end=",")
               text+="__"+","
       print(text)
       self.plotim(text)
       self.sloution=str[ran]
    #    inp=input("your best guess for blank is :")
    #    if(inp==str[ran]):
    #      sucess()
    #    else:print("press any key to exit retry new one ") 
    def checkcorrect(self,text):
        ##logic for check here## 
        if(self.sloution!=""):
            if(self.sloution ==text):
                print("pass")
    
    def makenew_image(self):
        ##code to make new image 
        #num=random.randint(0,5)
        num=1
        if(num==1):
        ##callback 1 type of captcha ##
           self.loadf1()

    def show_img(self):
        ##fn to make new images ##
        self.makenew_image()
        self.image.setPixmap(QtGui.QPixmap("out.jpg"))
    
    def check_fn(self):
        ##fn to check value ##
        text=self.textinput.text()
        self.checkcorrect(text)    


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
